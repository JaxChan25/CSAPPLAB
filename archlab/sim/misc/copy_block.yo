                            | # Execution begins at address 0 
0x000:                      | 	.pos 0
0x000: 30f40002000000000000 | 	irmovq stack, %rsp  	# Set up stack pointer
0x00a: 804800000000000000   | 	call main		# Execute main program
0x013: 00                   | 	halt			# Terminate program 
                            | 	
                            | # 内存区域，存放数据/链表之类
0x018:                      | .align 8
                            | # Source block
0x018:                      | src:
0x018: 0a00000000000000     | .quad 0x00a
0x020: b000000000000000     | .quad 0x0b0
0x028: 000c000000000000     | .quad 0xc00
                            | # Destination block
0x030:                      | dest:
0x030: 1101000000000000     | .quad 0x111
0x038: 2202000000000000     | .quad 0x222
0x040: 3303000000000000     | .quad 0x333
                            | 
                            | #END
                            | 
0x048:                      | main:	
0x048: 30f71800000000000000 | 	irmovq src,%rdi     #param1
0x052: 30f63000000000000000 |     irmovq dest,%rsi    #param2
0x05c: 30f20300000000000000 |     irmovq $3,%rdx     #param3
0x066: 807000000000000000   | 	call copy_block		# copy_block(src,dest,)
0x06f: 90                   | 	ret
                            | 
                            | # long copy_block(long *src, long *dest, long len)
                            | # src in %rdi
                            | # dest in %rsi
                            | # 3 in %rdx
0x070:                      | copy_block:	
0x070: a03f                 |     pushq %rbx
0x072: a09f                 |     pushq %r9
0x074: a0af                 |     pushq %r10
0x076: 6300                 | 	xorq %rax,%rax           #result=0
0x078: 30f90800000000000000 |     irmovq $8,%r9
0x082: 30fa0100000000000000 |     irmovq $1,%r10
0x08c: 70b100000000000000   |     jmp test
0x095:                      | loop:
0x095: 50370000000000000000 |     mrmovq (%rdi),%rbx        #long val = *src;
0x09f: 6097                 |     addq %r9,%rdi            #src++;
0x0a1: 40360000000000000000 |     rmmovq %rbx,(%rsi)        #*dest = val;
0x0ab: 6096                 |     addq %r9,%rsi            #dest++;
0x0ad: 6330                 |     xorq %rbx,%rax            #update checksum
0x0af: 61a2                 |     subq %r10,%rdx           #len--
0x0b1:                      | test:
0x0b1: 6222                 |     andq %rdx,%rdx  #set CC
0x0b3: 749500000000000000   |     jne loop        #Stop when len = 0
0x0bc: b0af                 |     popq %r10
0x0be: b09f                 |     popq %r9
0x0c0: b03f                 |     popq %rbx
0x0c2: 90                   | 	ret                         
                            | 
                            | # Stack starts here and grows to lower addresses.
0x200:                      | 	.pos 0x200
0x200:                      | stack:
